Teilaufgabe 1 (unoptimiert):

./stringsort 0
Anzahl muss mindestens 1 sein

 ./stringsort 1
Unsortiertes Array:
0
Sortiertes Array:
0

./stringsort 2
Unsortiertes Array:
1 0
Sortiertes Array:
0 1

./stringsort 20
Unsortiertes Array:
15 14 16 1 8 4 7 4 7 16 18 2 12 12 18 4 5 6 18 6
Sortiertes Array:
1 12* 14 15 16* 18** 2 4** 5 6* 7* 8

./stringsort 200
Unsortiertes Array:
137 159 52 188 144 145 13 22 131 31 167 138 157 47 106 65 144 12 26 42 1 43 70 14 94 12 37 146 16 160 84 106 71 88 46 15 34 59 37 117 43 156 55 0 155 113 65 99 77 43 94 78 87
164 93 133 128 130 32 96 42 116 154 113 5 0 128 39 12 117 108 55 25 163 7 181 28 24 80 105 68 126 184 107 90 29 40 18 159 72 115 153 141 21 66 146 22 146 137 34 15 45 41 40 160
48 21 188 72 54 93 92 132 77 199 23 106 40 193 17 64 60 170 5 82 188 103 56 86 40 42 101 37 83 94 197 131 115 185 155 121 31 48 54 60 199 29 167 191 174 136 56 35 59 13 117 47 69
125 134 109 167 187 99 50 81 96 133 149 34 40 22 17 88 28 77 40 57 196 31 32 133 87 19 192 53 88 191 122 13 125 183 180 65 82 182 146 131 115 95
Sortiertes Array:
0* 1 101 103 105 106** 107 108 109 113* 115** 116 117** 12** 121 122 125* 126 128* 13** 130 131** 132 133** 134 136 137* 138 14 141 144* 145 146*** 149 15* 153 154 155* 156 157 159*
16 160* 163 164 167** 17* 170 174 18 180 181 182 183 184 185 187 188** 19 191* 192 193 196 197 199* 21* 22** 23 24 25 26 28* 29* 31** 32* 34** 35 37** 39 40***** 41 42** 43** 45 46 47*
48* 5* 50 52 53 54* 55* 56* 57 59* 60* 64 65** 66 68 69 7 70 71 72* 77** 78 80 81 82* 83 84 86 87* 88** 90 92 93* 94** 95 96* 99*

valgrind ./stringsort 20
==1275== Memcheck, a memory error detector
==1275== Copyright (C) 2002-2024, and GNU GPL'd, by Julian Seward et al.
==1275== Using Valgrind-3.24.0 and LibVEX; rerun with -h for copyright info
==1275== Command: ./stringsort 20
==1275==
Unsortiertes Array:
3 4 5 7 14 11 12 12 12 0 9 0 16 2 11 18 17 3 2 9
Sortiertes Array:
0* 11* 12** 14 16 17 18 2* 3* 4 5 7 9*
==1275==
==1275== HEAP SUMMARY:
==1275==     in use at exit: 0 bytes in 0 blocks
==1275==   total heap usage: 23 allocs, 23 frees, 1,304 bytes allocated
==1275==
==1275== All heap blocks were freed -- no leaks are possible
==1275==
==1275== For lists of detected and suppressed errors, rerun with: -s
==1275== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

make cppcheck
cppcheck --enable=warning,style --std=c11 stringsort.c
Checking stringsort.c ...
stringsort.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^

Teilaufgabe 2 (optimiert):

time ./stringsort 20000 > /dev/null
./stringsort 20000 > /dev/null  1,85s user 0,00s system 99% cpu 1,854 total

time ./stringsort-optimiert 20000 > /dev/null
./stringsort-optimiert 20000 > /dev/null  1,99s user 0,00s system 99% cpu 1,989 total

>> Optimiertes ist langsamer, braucht daf√ºr aber deutlich weniger Platz.

 ./stringsort-optimiert 0
Anzahl muss mindestens 1 sein

./stringsort-optimiert 1
Unsortiertes Array:
0
Sortiertes Array:
0

./stringsort-optimiert 2
Unsortiertes Array:
0 0
Sortiertes Array:
0*

./stringsort-optimiert 20
Unsortiertes Array:
11 4 3 5 6 6 17 9 13 4 11 15 11 8 14 6 7 9 17 14
Sortiertes Array:
11** 13 14* 15 17* 3 4* 5 6** 7 8 9*

 ./stringsort-optimiert 200
Unsortiertes Array:
171 130 142 151 172 22 136 126 130 47 156 33 49 134 5 87 177 167 39 168 146 139 54 70 12 141 54 131 90 36 114 14 166 8 117 138 31 53 64 113 52 172 146 101 59 103 140 36 22 132 4 168 23 59 191 35 152 45 119 194 33 33 8 199 194 125 89 177 130 106 90 134 78 188 188 137 92 128 125 66 12 82 187 188 93 178 23 197 175 94 191 8 128 152 159 74 29 48 51 160 154 93 94 185 81 82 74 125 163 0 144 127 82 131 115 175 61 91 172 36 185 115 196 65 67 107 139 97 107 142 9 14 35 103 199 69 138 73 194 101 25 138 180 59 21 96 186 82 187 158 70 124 26 66 190 93 173 129 142 33 24 151 47 59 7 198 128 97 23 75 150 49 13 130 108 35 26 95 69 165 5 140 90 31 6 32 77 132 113 171 165 137 75 164 149 82 162 77 179 185
Sortiertes Array:
0 101* 103* 106 107* 108 113* 114 115* 117 119 12* 124 125** 126 127 128** 129 13 130*** 131* 132* 134* 136 137* 138** 139* 14* 140* 141 142** 144 146* 149 150 151* 152* 154 156 158 159 160 162 163 164 165* 166 167 168* 171* 172** 173 175* 177* 178 179 180 185** 186 187* 188** 190 191* 194** 196 197 198 199* 21 22* 23** 24 25 26* 29 31* 32 33*** 35** 36** 39 4 45 47* 48 49* 5* 51 52 53 54* 59*** 6 61 64 65 66* 67 69* 7 70* 73 74* 75* 77* 78 8** 81 82**** 87 89 9 90** 91 92 93** 94* 95 96 97*

valgrind ./stringsort-optimiert 20
==68752== Memcheck, a memory error detector
==68752== Copyright (C) 2002-2024, and GNU GPL'd, by Julian Seward et al.
==68752== Using Valgrind-3.25.0 and LibVEX; rerun with -h for copyright info
==68752== Command: ./stringsort-optimiert 20
==68752==
Unsortiertes Array:
0 10 1 3 13 5 13 14 5 1 8 1 13 5 2 12 0 9 11 17
Sortiertes Array:
0* 1** 10 11 12 13** 14 17 2 3 5** 8 9
==68752==
==68752== HEAP SUMMARY:
==68752==     in use at exit: 0 bytes in 0 blocks
==68752==   total heap usage: 4 allocs, 4 frees, 1,147 bytes allocated
==68752==
==68752== All heap blocks were freed -- no leaks are possible
==68752==
==68752== For lists of detected and suppressed errors, rerun with: -s
==68752== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)