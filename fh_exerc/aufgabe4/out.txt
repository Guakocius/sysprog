==155879== Memcheck, a memory error detector
==155879== Copyright (C) 2002-2024, and GNU GPL'd, by Julian Seward et al.
==155879== Using Valgrind-3.25.0 and LibVEX; rerun with -h for copyright info
==155879== Command: ./listfiles xxx listfiles.c listfiles-example-dir /dev/tty
==155879== 
==155879== Conditional jump or move depends on uninitialised value(s)
==155879==    at 0x40014A0: list_directory (fileinfo.c:29)
==155879==    by 0x4001A29: fileinfo_create (fileinfo.c:144)
==155879==    by 0x40012C0: main (listfiles.c:36)
==155879==  Uninitialised value was created by a heap allocation
==155879==    at 0x484A7A8: malloc (vg_replace_malloc.c:446)
==155879==    by 0x400141E: list_directory (fileinfo.c:17)
==155879==    by 0x4001A29: fileinfo_create (fileinfo.c:144)
==155879==    by 0x40012C0: main (listfiles.c:36)
==155879== 
==155879== Conditional jump or move depends on uninitialised value(s)
==155879==    at 0x40014A0: list_directory (fileinfo.c:29)
==155879==    by 0x4001A29: fileinfo_create (fileinfo.c:144)
==155879==    by 0x400152F: list_directory (fileinfo.c:40)
==155879==    by 0x4001A29: fileinfo_create (fileinfo.c:144)
==155879==    by 0x40012C0: main (listfiles.c:36)
==155879==  Uninitialised value was created by a heap allocation
==155879==    at 0x484A7A8: malloc (vg_replace_malloc.c:446)
==155879==    by 0x400141E: list_directory (fileinfo.c:17)
==155879==    by 0x4001A29: fileinfo_create (fileinfo.c:144)
==155879==    by 0x400152F: list_directory (fileinfo.c:40)
==155879==    by 0x4001A29: fileinfo_create (fileinfo.c:144)
==155879==    by 0x40012C0: main (listfiles.c:36)
==155879== 
==155879== Use of uninitialised value of size 8
==155879==    at 0x4001497: list_directory (fileinfo.c:29)
==155879==    by 0x4001A29: fileinfo_create (fileinfo.c:144)
==155879==    by 0x400152F: list_directory (fileinfo.c:40)
==155879==    by 0x4001A29: fileinfo_create (fileinfo.c:144)
==155879==    by 0x40012C0: main (listfiles.c:36)
==155879==  Uninitialised value was created by a heap allocation
==155879==    at 0x484A7A8: malloc (vg_replace_malloc.c:446)
==155879==    by 0x40018F4: fileinfo_create (fileinfo.c:118)
==155879==    by 0x400152F: list_directory (fileinfo.c:40)
==155879==    by 0x4001A29: fileinfo_create (fileinfo.c:144)
==155879==    by 0x400152F: list_directory (fileinfo.c:40)
==155879==    by 0x4001A29: fileinfo_create (fileinfo.c:144)
==155879==    by 0x40012C0: main (listfiles.c:36)
==155879== 
==155879== Invalid read of size 4
==155879==    at 0x4001497: list_directory (fileinfo.c:29)
==155879==    by 0x4001A29: fileinfo_create (fileinfo.c:144)
==155879==    by 0x400152F: list_directory (fileinfo.c:40)
==155879==    by 0x4001A29: fileinfo_create (fileinfo.c:144)
==155879==    by 0x40012C0: main (listfiles.c:36)
==155879==  Address 0x108 is not stack'd, malloc'd or (recently) free'd
==155879== 
==155879== 
==155879== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==155879==  Access not within mapped region at address 0x108
==155879==    at 0x4001497: list_directory (fileinfo.c:29)
==155879==    by 0x4001A29: fileinfo_create (fileinfo.c:144)
==155879==    by 0x400152F: list_directory (fileinfo.c:40)
==155879==    by 0x4001A29: fileinfo_create (fileinfo.c:144)
==155879==    by 0x40012C0: main (listfiles.c:36)
==155879==  If you believe this happened as a result of a stack
==155879==  overflow in your program's main thread (unlikely but
==155879==  possible), you can try to increase the size of the
==155879==  main thread stack using the --main-stacksize= flag.
==155879==  The main thread stack size used in this run was 8388608.
==155879== 
==155879== HEAP SUMMARY:
==155879==     in use at exit: 67,592 bytes in 9 blocks
==155879==   total heap usage: 9 allocs, 0 frees, 67,592 bytes allocated
==155879== 
==155879== LEAK SUMMARY:
==155879==    definitely lost: 280 bytes in 1 blocks
==155879==    indirectly lost: 560 bytes in 2 blocks
==155879==      possibly lost: 0 bytes in 0 blocks
==155879==    still reachable: 66,752 bytes in 6 blocks
==155879==         suppressed: 0 bytes in 0 blocks
==155879== Rerun with --leak-check=full to see details of leaked memory
==155879== 
==155879== For lists of detected and suppressed errors, rerun with: -s
==155879== ERROR SUMMARY: 4 errors from 4 contexts (suppressed: 0 from 0)
